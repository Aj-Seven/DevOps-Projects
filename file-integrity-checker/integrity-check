#!/bin/bash

# Colors

BLUE="\033[34m"
GREEN="\033[32m"
RED="\033[31m"
NC="\033[0m"

# Default directory for storing hashes
HASH_BASE_PATH=~/.local/share/hash/

# Ensure the hash base path
if [ ! -d $HASH_BASE_PATH ]; then
    mkdir -p "$HASH_BASE_PATH"
fi

# Function to generate the hash for a file or directory
generate_hash() {
    local target_path="$1"
    local hash_file="$2"

    if [ -d "$target_path" ]; then
        # If it's a directory, hash all files within the directory
        find "$target_path" -type f | xargs sha256sum > "$hash_file"
    elif [ -f "$target_path" ]; then
        # If it's a single file, hash it directly
        sha256sum "$target_path" > "$hash_file"
    else
        echo -e "$RED The specified path is neither a file nor a directory. $NC"
    fi
}

# Function to initialize hash generation
init() {
    echo -e "$BLUE Init mode $NC"

    local target_path="$1"
    if [ -z "$target_path" ]; then
        echo -e "$RED No file or directory specified for hash generation. $NC"
        echo -e "Example Usage: \n   • ./integrity-check init /var/log \n   • ./integrity-check init text.txt"
    fi

    if [ ! -e "$target_path" ]; then
        echo -e "$RED The specified path does not exist: $target_path $NC"
    fi
        # Generate a unique file name for the hash storage based on the target's name
        local hash_file="$HASH_BASE_PATH/$(basename "$target_path")-$(date "+%Y-%m-%d %H:%M:%S"
).sha256sum"

        echo "Generating hash for: $target_path"
        generate_hash "$target_path" "$hash_file"
        echo -e "$GREEN Hashes saved successfully to: $hash_file $NC"
}

# Function to check hashes against the stored .sha256sum file
check() {
    echo -e "$BLUE Check mode $NC"
    
    local target_path="$1"
    local hash_file=""
    
    if [ -d "$target_path" ]; then
        hash_file="$HASH_BASE_PATH/$target_path/$(basename "$target_path").sha256sum"
    elif [ -f "$target_path" ]; then
        hash_file="$HASH_BASE_PATH/$target_path.sha256sum"
    else
        echo -e "$RED The specified path is neither a file nor a directory. $NC"
    fi

    if [ -f "$hash_file" ]; then
        echo -e "$BLUE Checking hash: $hash_file $NC"
        sha256sum -c "$hash_file" || echo -e "$RED Hash mismatch found $NC"
    else
        echo -e "$RED No hash file found for: $target_path $NC"
    fi
}

# Function to update the hash list
update() {
    echo -e "$BLUE Update mode $NC"

    local target_path="$1"
    if [ -z "$target_path" ]; then
        echo -e "$RED No file or directory specified for hash update. $NC"
    fi

    if [ ! -e "$target_path" ]; then
        echo -e "$RED The specified path does not exist: $target_path $NC"
    fi

    echo -e "$BLUE Updating hash list for: $target_path $NC"
    local hash_file=""

    if [ -d "$target_path" ]; then
        hash_file="$HASH_BASE_PATH/$target_path/$(basename "$target_path").sha256sum"
    elif [ -f "$target_path" ]; then
        hash_file="$HASH_BASE_PATH/$target_path.sha256sum"
    fi

    generate_hash "$target_path" "$hash_file"
    echo -e "$GREEN Hash list updated successfully for: $target_path $NC"
}

_help() {
    echo -e "Invalid option: $1 \n    • Use by 'init', 'update', or 'check'."
}

# Main case to handle different modes
case "$1" in
    init)
        init
        ;;
    check)
        check
        ;;
    update)
        update
        ;;
    *)
        _help
        ;;
esac

